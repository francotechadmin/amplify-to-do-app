"use client";
import { useState, useEffect } from "react";
import "@aws-amplify/ui-react/styles.css";
import { Amplify } from "aws-amplify";
import config from "../../aws-exports"; // auto-generated by Amplify
import { getCurrentUser } from "aws-amplify/auth";
import { generateClient } from "aws-amplify/api";
import { withAuthenticator } from "@aws-amplify/ui-react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";

import NavBar from "./components/NavBar";
import Footer from "./components/Footer";
import TaskList from "./components/TaskList";
import WelcomeModal from "./components/WelcomeModal";
import SubscriptionGuard from "./components/SubscriptionGuard";

// GraphQL queries and mutations
import {
  createUser,
  createTodo,
  deleteTodo,
  updateTodo,
} from "@/graphql/mutations";
import { getUser, listTodos } from "@/graphql/queries";

// Configure Amplify
const libraryOptions = { ssr: true };
Amplify.configure({ ...config, ...libraryOptions });

const client = generateClient({ authMode: "userPool" });

// ======== HELPER FUNCTIONS ========
const fetchTasks = async () => {
  const response = await client.graphql({ query: listTodos });
  return response.data.listTodos.items.map((task) => ({
    TaskId: task.id,
    TaskContent: task.content,
    isCompleted: task.isCompleted,
  }));
};

const addTask = async (newTask: string) => {
  const user = await getCurrentUser();
  const userId = user.username;
  const response = await client.graphql({
    query: createTodo,
    variables: {
      input: { content: newTask, isCompleted: false, userID: userId },
    },
  });
  return {
    TaskId: response.data.createTodo.id,
    TaskContent: response.data.createTodo.content,
  };
};

const updateTask = async ({
  taskId,
  newContent,
}: {
  taskId: string;
  newContent: string;
}) => {
  const response = await client.graphql({
    query: updateTodo,
    variables: { input: { id: taskId, content: newContent } },
  });
  return {
    TaskId: response.data.updateTodo.id,
    TaskContent: response.data.updateTodo.content,
  };
};

const deleteTask = async (taskId: string) => {
  const response = await client.graphql({
    query: deleteTodo,
    variables: { input: { id: taskId } },
  });
  return {
    TaskId: response.data.deleteTodo.id,
    TaskContent: response.data.deleteTodo.content,
  };
};

const clearTasks = async () => {
  const response = await client.graphql({ query: listTodos });
  const tasks = response.data.listTodos.items;
  for (const task of tasks) {
    await client.graphql({
      query: deleteTodo,
      variables: { input: { id: task.id } },
    });
  }
};

const toggleComplete = async ({
  taskId,
  isCompleted,
}: {
  taskId: string;
  isCompleted: boolean;
}) => {
  const response = await client.graphql({
    query: updateTodo,
    variables: { input: { id: taskId, isCompleted: isCompleted } },
  });
  return {
    TaskId: response.data.updateTodo.id,
    TaskContent: response.data.updateTodo.content,
  };
};

const fetchUser = async (userId: string) => {
  const response = await client.graphql({
    query: getUser,
    variables: { id: userId },
  });
  return response.data;
};

const createUserMutation = async (userId: string) => {
  const response = await client.graphql({
    query: createUser,
    variables: { input: { id: userId, subscriptionStatus: "inactive" } },
  });
  return response.data.createUser.id;
};

const handleCreateUser = async (
  setShowWelcomeModal: React.Dispatch<React.SetStateAction<boolean>>
) => {
  const currentUser = await getCurrentUser();
  if (!currentUser) return;

  try {
    // Attempt to fetch the user by their Cognito username
    const data = await fetchUser(currentUser.username);
    if (!data || !data.getUser) {
      // If the user doesn't exist, create it
      console.log("Creating user...", currentUser.username);
      await createUserMutation(currentUser.username);
      setShowWelcomeModal(true);
    }
  } catch (error) {
    console.error("Error fetching or creating user:", error);
  }
};

// ======== MAIN COMPONENT ========
function Home() {
  const [showWelcomeModal, setShowWelcomeModal] = useState(false);
  const queryClient = useQueryClient();

  // 1) Fetch tasks
  const { data: tasks = [], isLoading } = useQuery({
    queryKey: ["tasks"],
    queryFn: fetchTasks,
  });

  // 2) Add Task
  const { mutate: handleAddTask } = useMutation({
    mutationFn: addTask,
    onMutate: (newTask) => {
      queryClient.setQueryData(["tasks"], (old: any) => {
        return [
          ...(old || []),
          { TaskId: `temp-${Date.now()}`, TaskContent: newTask },
        ];
      });
    },
    onSettled: () => queryClient.invalidateQueries({ queryKey: ["tasks"] }),
  });

  // 3) Edit Task
  const { mutate: handleEditTask } = useMutation({
    mutationFn: updateTask,
    onMutate: ({ taskId, newContent }) => {
      queryClient.setQueryData(["tasks"], (old: any) => {
        return old.map((task: any) =>
          task.TaskId === taskId
            ? { TaskId: taskId, TaskContent: newContent }
            : task
        );
      });
    },
    onSettled: () => queryClient.invalidateQueries({ queryKey: ["tasks"] }),
  });

  // 4) Remove Task
  const { mutate: handleRemoveTask } = useMutation({
    mutationFn: deleteTask,
    onMutate: (taskId) => {
      queryClient.setQueryData(["tasks"], (old: any) => {
        return old.filter((task: any) => task.TaskId !== taskId);
      });
    },
    onSettled: () => queryClient.invalidateQueries({ queryKey: ["tasks"] }),
  });

  // 5) Clear All
  const { mutate: handleClearTasks } = useMutation({
    mutationFn: clearTasks,
    onMutate: () => {
      // Optimistically update the UI
      queryClient.setQueryData(["tasks"], []);
    },
    onSettled: () => queryClient.invalidateQueries({ queryKey: ["tasks"] }),
  });

  // 6) Toggle Task Completion
  const { mutate: handleToggleComplete } = useMutation({
    mutationFn: toggleComplete,
    onMutate: ({ taskId, isCompleted }) => {
      queryClient.setQueryData(["tasks"], (old: any) => {
        return old.map((task: any) =>
          task.TaskId === taskId ? { ...task, isCompleted: isCompleted } : task
        );
      });
    },
    onSettled: () => queryClient.invalidateQueries({ queryKey: ["tasks"] }),
  });

  // Ensure the user record exists on mount
  useEffect(() => {
    handleCreateUser(setShowWelcomeModal);
  }, []);
  console.log(tasks);

  return (
    <div className="flex flex-col flex-1 min-h-0 p-4">
      {/* NAV BAR at the top */}
      <NavBar />

      {/* Optional "Welcome" overlay if user is brand new */}
      {showWelcomeModal && (
        <WelcomeModal
          onClose={() => setShowWelcomeModal(false)}
          onSubscribe={() => setShowWelcomeModal(false)} // On subscription logic
          isCreatingSession={false}
        />
      )}

      {/* MAIN CONTENT AREA */}
      <div className="flex flex-col items-center justify-start max-w-90 pt-8 flex-1 min-h-0">
        <TaskList
          tasks={tasks}
          isLoading={isLoading}
          onAddTask={handleAddTask}
          onEditTask={(taskId: string, newContent: string) =>
            handleEditTask({ taskId, newContent })
          }
          onRemoveTask={handleRemoveTask}
          onClearAll={handleClearTasks}
          onToggleComplete={(taskId: string) =>
            handleToggleComplete({
              taskId,
              isCompleted: !tasks.find((task) => task.TaskId === taskId)
                ?.isCompleted,
            })
          }
        />
      </div>

      {/* FOOTER at bottom */}
      {/* <Footer /> */}
    </div>
  );
}

// Export withAuthenticator if you want Amplifyâ€™s login flow
export default withAuthenticator(Home);
