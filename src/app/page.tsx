"use client";
import { useState } from "react";
import "@aws-amplify/ui-react/styles.css";
import { Amplify } from "aws-amplify";
import config from "../aws-exports"; // This file is generated by Amplify CLI.
import { signOut, getCurrentUser } from "aws-amplify/auth";
import { generateClient } from "aws-amplify/api";

const libraryOptions = {
  ssr: true,
};

Amplify.configure({ ...config, ...libraryOptions });

import { withAuthenticator } from "@aws-amplify/ui-react";
import { createTodo, deleteTodo, updateTodo } from "@/graphql/mutations";
import { listTodos } from "@/graphql/queries";

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";

const client = generateClient({ authMode: "userPool" });
const fetchTasks = async () => {
  const response = await client.graphql({ query: listTodos });
  return response.data.listTodos.items.map((task) => ({
    TaskId: task.id,
    TaskContent: task.content,
  }));
};
const addTask = async (newTask: string) => {
  const user = await getCurrentUser();
  const userId = user.username;

  const response = await client.graphql({
    query: createTodo,
    variables: {
      input: { content: newTask, author: userId, isCompleted: false },
    },
  });

  return {
    TaskId: response.data.createTodo.id,
    TaskContent: response.data.createTodo.content,
  };
};
const updateTask = async ({
  taskId,
  newContent,
}: {
  taskId: string;
  newContent: string;
}) => {
  const response = await client.graphql({
    query: updateTodo,
    variables: { input: { id: taskId, content: newContent } },
  });

  return {
    TaskId: response.data.updateTodo.id,
    TaskContent: response.data.updateTodo.content,
  };
};
const deleteTask = async (taskId: string) => {
  const response = await client.graphql({
    query: deleteTodo,
    variables: { input: { id: taskId } },
  });

  return {
    TaskId: response.data.deleteTodo.id,
    TaskContent: response.data.deleteTodo.content,
  };
};
const clearTasks = async () => {
  const response = await client.graphql({ query: listTodos });
  const tasks = response.data.listTodos.items;

  for (const task of tasks) {
    await client.graphql({
      query: deleteTodo,
      variables: { input: { id: task.id } },
    });
  }
};

function Home() {
  const [newTask, setNewTask] = useState("");

  const queryClient = useQueryClient();

  const {
    data: tasks = [],
    isLoading,
    error,
  } = useQuery({ queryKey: ["tasks"], queryFn: fetchTasks });

  // mutations
  const { mutate: handleAddTask } = useMutation({
    mutationFn: addTask,
    onMutate: (newTask) => {
      queryClient.setQueryData(["tasks"], (oldTasks: any) => {
        return [...oldTasks, { TaskId: "optimistic", TaskContent: newTask }];
      });
    },
    onSettled: () => queryClient.invalidateQueries({ queryKey: ["tasks"] }),
  });

  const { mutate: handleEditTask } = useMutation({
    mutationFn: updateTask,
    onMutate: ({ taskId, newContent }) => {
      queryClient.setQueryData(["tasks"], (oldTasks: any) => {
        return oldTasks.map((task: any) =>
          task.TaskId === taskId
            ? { TaskId: taskId, TaskContent: newContent }
            : task
        );
      });
    },
    onSettled: () => queryClient.invalidateQueries({ queryKey: ["tasks"] }),
  });

  const { mutate: handleRemoveTask } = useMutation({
    mutationFn: deleteTask,
    onMutate: (taskId) => {
      queryClient.setQueryData(["tasks"], (oldTasks: any) => {
        return oldTasks.filter((task: any) => task.TaskId !== taskId);
      });
    },
    onSettled: () => queryClient.invalidateQueries({ queryKey: ["tasks"] }),
  });

  const { mutate: handleClearTasks } = useMutation({
    mutationFn: clearTasks,
    onMutate: () => {
      queryClient.setQueryData(["tasks"], []);
    },
    onSettled: () => queryClient.invalidateQueries({ queryKey: ["tasks"] }),
  });

  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <h1 className="text-4xl font-bold">To-Do List</h1>
        <form
          className="flex gap-4"
          onSubmit={(e) => {
            e.preventDefault();
            handleAddTask(newTask);
            setNewTask("");
          }}
        >
          <input
            type="text"
            placeholder="Add a new task"
            value={newTask}
            onChange={(e) => setNewTask(e.target.value)}
            className="border border-gray-300 p-2 rounded text-black"
          />
          <button type="submit" className="bg-blue-500 text-white p-2 rounded">
            Add
          </button>
        </form>
        {isLoading && (
          <div className="flex gap-2">
            <Loader />
            <p>Loading tasks...</p>
          </div>
        )}
        <ul className="list-disc pl-5">
          {tasks.length === 0 && !isLoading ? (
            <p className="text-gray-500">No tasks added yet.</p>
          ) : (
            tasks.map((task) => (
              <li
                key={task.TaskId}
                className="p-2 flex items-center justify-between w-full sm:w-auto"
              >
                <span>{task.TaskContent}</span>
                <button
                  onClick={(e) => {
                    e.preventDefault();
                    const newContent = prompt("Edit task", task.TaskContent);
                    if (newContent) {
                      handleEditTask({ taskId: task.TaskId, newContent });
                    }
                  }}
                  className="pl-4 text-blue-500 hover:underline"
                >
                  Edit
                </button>
                <button
                  onClick={() => handleRemoveTask(task.TaskId)}
                  className="text-red-500 hover:underline ml-4"
                >
                  Delete
                </button>
              </li>
            ))
          )}
          {tasks.length > 0 && (
            <button
              onClick={() => handleClearTasks()}
              className="text-red-500 hover:underline mt-4"
            >
              Clear all tasks
            </button>
          )}
        </ul>
      </main>
      <footer className="row-start-3 text-center text-gray-500">
        <p>
          Created by{" "}
          <a
            target="_blank"
            href="https://github.com/francotechadmin"
            className="text-blue-500"
          >
            Gabriel Franco
          </a>
        </p>
        <button
          onClick={() => signOut()}
          className="text-red-500 hover:underline mt-4"
        >
          Sign out
        </button>
      </footer>
    </div>
  );
}

const Loader = () => (
  <div className="w-5 h-5 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
);

export default withAuthenticator(Home);
