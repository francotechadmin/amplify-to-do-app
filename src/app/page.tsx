"use client";
import { useState, useEffect } from "react";
import "@aws-amplify/ui-react/styles.css";
import { Amplify } from "aws-amplify";
import { post, get, put, del } from "aws-amplify/api";
import config from "../aws-exports"; // This file is generated by Amplify CLI.
import { signOut, getCurrentUser } from "aws-amplify/auth";

const libraryOptions = {
  ssr: true,
};

Amplify.configure({ ...config, ...libraryOptions });

import { withAuthenticator } from "@aws-amplify/ui-react";

// task model
interface Task {
  TaskId: string;
  TaskContent: string;
}

function Home() {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [newTask, setNewTask] = useState("");

  const fetchTasks = async () => {
    try {
      const user = await getCurrentUser();
      const userId = user.username;

      const getTasks = get({
        apiName: "itemsApi",
        path: `/items/tasks/${userId}`,
      });

      const { body } = await getTasks.response;
      const response: Task[] = (await body.json()) as unknown as Task[];

      if (!response) {
        console.error("Error fetching tasks:", response);
        return;
      }

      const fetchedTasks = response?.map((task: Task) => ({
        TaskId: task.TaskId,
        TaskContent: task.TaskContent,
      }));
      console.log(fetchedTasks);
      setTasks(fetchedTasks);
    } catch (error) {
      console.error("Error fetching tasks:", error);
    }
  };

  const handleAddTask = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (newTask.trim() === "") return;

    try {
      const user = await getCurrentUser();
      const userId = user.username;

      const postTask = post({
        apiName: "itemsApi",
        path: `/items/tasks`,
        options: {
          body: {
            UserId: userId,
            TaskContent: newTask,
          },
        },
      });

      const { body } = await postTask.response;
      const response = (await body.json()) as unknown as { task: Task };

      if (!response || !response.task) {
        console.error("Error adding task:", response);
        return;
      }

      const addedTask: Task = {
        TaskId: response.task.TaskId,
        TaskContent: response.task.TaskContent,
      };

      if (!addedTask) {
        console.error("Error adding task:", response);
        return;
      }

      setTasks([...tasks, { TaskId: addedTask.TaskId, TaskContent: newTask }]);
      setNewTask("");
    } catch (error) {
      console.error("Error adding task:", error);
    }
  };

  const handleRemoveTask = async (taskId: string) => {
    try {
      const user = await getCurrentUser();
      const userId = user.username;

      const deleteTask = del({
        apiName: "itemsApi",
        path: `/items/tasks/${userId}/${taskId}`,
      });

      await deleteTask.response;

      setTasks(tasks.filter((task) => task.TaskId !== taskId));
    } catch (error) {
      console.error("Error deleting task:", error);
    }
  };

  const handleEditTask = async (taskId: string) => {
    const newContent = prompt(
      "Edit task",
      tasks.find((task) => task.TaskId === taskId)?.TaskContent
    );
    if (!newContent || newContent.trim() === "") return;

    try {
      const user = await getCurrentUser();
      const userId = user.username;

      const putTask = put({
        apiName: "itemsApi",
        path: `/items/tasks/${userId}/${taskId}`,
        options: {
          body: {
            TaskContent: newContent,
          },
        },
      });

      await putTask.response;

      setTasks(
        tasks.map((task) =>
          task.TaskId === taskId ? { ...task, TaskContent: newContent } : task
        )
      );
    } catch (error) {
      console.error("Error editing task:", error);
    }
  };

  const handleClearTasks = async () => {
    try {
      const user = await getCurrentUser();
      const userId = user.username;

      const deleteTasks = del({
        apiName: "itemsApi",
        path: `/items/tasks/${userId}`,
      });

      await deleteTasks.response;

      setTasks([]);
    } catch (error) {
      console.error("Error clearing tasks:", error);
    }
  };

  useEffect(() => {
    fetchTasks();
  }, []);

  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <h1 className="text-4xl font-bold">To-Do List</h1>
        <form className="flex gap-4" onSubmit={handleAddTask}>
          <input
            type="text"
            placeholder="Add a new task"
            value={newTask}
            onChange={(e) => setNewTask(e.target.value)}
            className="border border-gray-300 p-2 rounded text-black"
          />
          <button type="submit" className="bg-blue-500 text-white p-2 rounded">
            Add
          </button>
        </form>
        <ul className="list-disc pl-5">
          {tasks.length === 0 ? (
            <p className="text-gray-500">No tasks added yet.</p>
          ) : (
            tasks.map((task: Task) => (
              <li
                key={task.TaskId}
                className="p-2 flex items-center justify-between w-full sm:w-auto"
              >
                <span>{task.TaskContent}</span>
                <button
                  onClick={() => handleEditTask(task.TaskId)}
                  className="pl-4 text-blue-500 hover:underline"
                >
                  Edit
                </button>
                <button
                  onClick={() => handleRemoveTask(task.TaskId)}
                  className="text-red-500 hover:underline ml-4"
                >
                  Delete
                </button>
              </li>
            ))
          )}
          {tasks.length > 0 && (
            <button
              onClick={handleClearTasks}
              className="text-red-500 hover:underline mt-4"
            >
              Clear all tasks
            </button>
          )}
        </ul>
      </main>
      <footer className="row-start-3 text-center text-gray-500">
        <p>
          Created by{" "}
          <a
            target="_blank"
            href="https://github.com/francotechadmin"
            className="text-blue-500"
          >
            Gabriel Franco
          </a>
        </p>
        <button
          onClick={() => signOut()}
          className="text-red-500 hover:underline mt-4"
        >
          Sign out
        </button>
      </footer>
    </div>
  );
}

export default withAuthenticator(Home);
